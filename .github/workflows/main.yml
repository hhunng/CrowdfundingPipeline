name: DevSecOps Pipeline
#on: workflow_dispatch

on:
  push:
    branches:
    - staging

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  ECR_REPOSITORY: evangelion-registry
  EKS_CLUSTER: Karpenter
  IMAGE_NAME: ${{secrets.AWS_ACCOUNT_ID}}.dkr.ecr.${{secrets.AWS_DEFAULT_REGION}}.amazonaws.com/evangelion-registry
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

jobs:

  gitleaks:
    name: Gitleaks Scan
    runs-on: ubuntu-latest
    container:
      image: zricethezav/gitleaks

    steps:
    - name: Code checkout
      uses: actions/checkout@v4

    - name: Run Gitleaks
      id: gitleaks
      run: |
        git config --global --add safe.directory '*'
        gitleaks detect --source . -v

    - name: Upload Gitleaks JSON report to artifacts
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: gitleaks
        path: gitleaks.json

  semgrep:
    name: Semgrep Scan
    runs-on: ubuntu-latest
    container:
      image: returntocorp/semgrep

    steps:
    - name: Code checkout
      uses: actions/checkout@v4
    - name: full scan
      run: |
        semgrep \
          --sarif --output report.sarif \
          --metrics=off \
          --config="p/python"

    - name: full scan json
      run: semgrep scan --lang python --json-output=semgrep.json

    - name: save report as pipeline artifact
      uses: actions/upload-artifact@v4
      with:
        name: semgrep
        path: semgrep.json
      if: ${{ always() }}

  dependencycheck:
    name: Dependency Check
    runs-on: ubuntu-latest
    steps:
    - name: Code checkout
      uses: actions/checkout@v4
    - name: Depcheck
      uses: dependency-check/Dependency-Check_Action@main
      id: Depcheck
      with:
        project: 'test'
        path: '.'
        format: 'SARIF'
        out: 'reports'
        args: >
          --failOnCVSS 7 --enableRetired
    - name: save report as pipeline artifact
      uses: actions/upload-artifact@v4
      with:
        name: dependencycheck
        path: ${{github.workspace}}/reports/dependency-check-report.sarif
      if: ${{ always() }}

  reports:
    needs: [semgrep, gitleaks, dependencycheck]
    name: Upload reports
    runs-on: ubuntu-latest
    container:
      image: python

    steps:
    - name: Code checkout
      uses: actions/checkout@v4

    - name: Download aritfact of Gitleaks
      id: gitleaks
      uses: actions/download-artifact@v4
      with:
        name: gitleaks
      continue-on-error: true

    - name: Download aritfact of Segrem
      uses: actions/download-artifact@v4
      with:
        name: semgrep

    - name: Pre-installed dependency
      #    - name: Download aritfact of Gitleaks
      #      uses: actions/download-artifact@v4
      #      with:
      #        name: gitleaks
      run: pip3 install requests

    - name: Download aritfact of Dependency Check OWASP
      uses: actions/download-artifact@v4
      with:
        name: dependencycheck

    - name: Push gitleaks report
      if: steps.gitleaks.outcome == 'success'
      run: |
        python3 upload-reports.py gitleaks.json ${{ secrets.DEFECT_TOKEN }}

    - name: Push reports
      run: |
        python3 upload-reports.py semgrep.json ${{ secrets.DEFECT_TOKEN }}
        python3 upload-reports.py dependency-check-report.sarif ${{ secrets.DEFECT_TOKEN }}

  registry:
    needs: reports
    name: Push Image to ECR
    runs-on: ubuntu-latest
    steps:
    - name: Code checkout
      uses: actions/checkout@v4

#    - name: Configure AWS credentials
#      uses: aws-actions/configure-aws-credentials@v1
#      with:
#        aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
#       aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
#        aws-region: ${{ env.AWS_DEFAULT_REGION }}

    - name: Upload image to ECR
      uses: appleboy/docker-ecr-action@master
      with:
        access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        registry: ${{ secrets.REGISTRY_URI }}
        repo: ${{ env.ECR_REPOSITORY }}
        region: ${{ secrets.AWS_DEFAULT_REGION }}
        tags: latest, ${{ github.run_number }}
        daemon_off: false
        dockerfile: ./Dockerfile
        context: ./
 

    
